{"version":3,"file":"static/js/710.8db3d030.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/selector.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"contactLabel\":\"ContactForm_contactLabel__vt5it\",\"contactInput\":\"ContactForm_contactInput__z6XOX\",\"buttonAddContact\":\"ContactForm_buttonAddContact__uUTAm\"};","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter.filter;\n\nexport const filtredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.items;\n  }\n  const normalizedFilter = filter.toLowerCase();\n  const result = contacts.items.filter(({ name, number }) => {\n    return (\n      name.toLowerCase().includes(normalizedFilter) ||\n      number.toLowerCase().includes(normalizedFilter)\n    );\n  });\n  return result;\n};\n","import css from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { getContacts } from 'redux/selector';\nimport Notiflix from 'notiflix';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const allContacts = useSelector(getContacts);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.target.elements;\n    if (\n      allContacts.some(\n        contact =>\n          contact.name.toLowerCase().trim() ===\n          form.name.value.toLowerCase().trim()\n      )\n    ) {\n      Notiflix.Notify.warning(`Contact ${form.name.value} already exist`);\n      evt.currentTarget.reset();\n    } else {\n      dispatch(\n        addContact({ name: form.name.value, number: form.number.value })\n      );\n      evt.currentTarget.reset();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.contactForm}>\n      <label className={css.contactLabel}>\n        Name\n        <input\n          className={css.contactInput}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={css.contactLabel}>\n        Number\n        <input\n          className={css.contactInput}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className={css.buttonAddContact}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contacItem\":\"ContactList_contacItem__ZrmrV\",\"buttonDelete\":\"ContactList_buttonDelete__3LEoC\"};","import React from 'react';\nimport css from '../ContactList/ContactList.module.css';\nimport { useDispatch } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { deleteContact, fetchContacts } from 'redux/operations';\nimport { editContact } from 'redux/operations';\n\nexport const ContactListItem = ({\n  id,\n  name: nameValue,\n  number: numberValue,\n}) => {\n  const dispatch = useDispatch();\n  const [isEdit, setIsEdit] = useState(false);\n  const [name, setName] = useState(nameValue);\n  const [number, setNumber] = useState(numberValue);\n\n  const handleChangeMode = () => {\n    if (isEdit) {\n      setIsEdit(prev => !prev);\n      dispatch(editContact({ id, name, number }));\n      return;\n    }\n    setIsEdit(prev => !prev);\n  };\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        return;\n      case 'number':\n        setNumber(e.target.value);\n        return;\n      default:\n        return;\n    }\n  };\n  return (\n    <li className={css.contacItem} key={id}>\n      {isEdit ? (\n        <input name=\"name\" onChange={handleChange} type=\"text\" value={name} />\n      ) : (\n        <span>{name}: </span>\n      )}\n      {isEdit ? (\n        <input\n          name=\"number\"\n          onChange={handleChange}\n          type=\"text\"\n          value={number}\n        />\n      ) : (\n        <span>{number} </span>\n      )}\n      <button\n        className={css.buttonDelete}\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        Delete\n      </button>\n      <button\n        className={css.buttonDelete}\n        type=\"button\"\n        onClick={handleChangeMode}\n      >\n        {isEdit ? 'Save' : 'Edit'}\n      </button>\n    </li>\n  );\n};\n","import React from 'react';\nimport css from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport { filtredContacts } from 'redux/selector';\n//import { deleteContact, fetchContacts } from 'redux/operations';\n//import { useEffect } from 'react';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\nconst ContactList = () => {\n  const contacts = useSelector(filtredContacts);\n\n  return (\n    <ul className={css.contactList}>\n      {contacts.length !== 0 ? (\n        contacts.map(({ id, name, number }) => (\n          <ContactListItem key={id} id={id} name={name} number={number} />\n        ))\n      ) : (\n        <p>No data to display...</p>\n      )}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterForm\":\"Filter_filterForm__+l+6Q\",\"contactLabel\":\"Filter_contactLabel__TqLYf\",\"contactFilter\":\"Filter_contactFilter__0yOzc\"};","import React from 'react';\nimport css from './Filter.module.css';\nimport { filterValue } from 'redux/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/selector';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(getFilter);\n  return (\n    <div className={css.filterForm}>\n      <label className={css.contactLabel}>\n        Find contacts by name\n        <input\n          className={css.contactFilter}\n          type=\"text\"\n          value={value}\n          onChange={e => dispatch(filterValue(e.target.value))}\n        ></input>\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './Section.module.css';\n\nconst Section = ({ title }) => (\n  <section className={css.section}>\n    <h2 className={css.title}>{title}</h2>\n  </section>\n);\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactList/ContactList';\nimport { Toaster } from 'react-hot-toast';\nimport { getIsLoading, getError } from 'redux/selector';\nimport Loader from '../components/Loader/Loader';\nimport Filter from '../components/Filter/Filter';\nimport Section from '../components/Section/Section';\nimport { fetchContacts } from 'redux/operations';\n\nconst styles = {\n  container: {\n    padding: '25px',\n    backgroundColor: 'rgb(255, 255, 0, 0.5)',\n  },\n};\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div style={styles.container}>\n      <ContactForm />\n      <Toaster position=\"top-center\" reverseOrder={false} />\n\n      <Section title=\"Contacts\"></Section>\n      <Filter />\n\n      {isLoading && !error && <Loader />}\n\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getFilter","filter","filtredContacts","normalizedFilter","toLowerCase","name","number","includes","ContactForm","dispatch","useDispatch","allContacts","useSelector","onSubmit","evt","preventDefault","form","target","elements","some","contact","trim","value","Notiflix","currentTarget","reset","addContact","className","css","type","pattern","title","required","ContactListItem","id","nameValue","numberValue","useState","isEdit","setIsEdit","setName","setNumber","useEffect","fetchContacts","handleChange","e","onChange","onClick","deleteContact","prev","editContact","length","map","filterValue","styles","container","padding","backgroundColor","Contacts","style","position","reverseOrder","Loader"],"sourceRoot":""}